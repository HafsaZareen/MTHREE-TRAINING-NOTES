# Detailed Guide: Creating a Comprehensive Error Monitoring Dashboard in Grafana

## Step 1: Access Grafana and Start a New Dashboard

1. Ensure port-forwarding is active for Grafana:
   bash
   kubectl port-forward svc/grafana -n monitoring 3000:80
   

2. Open your browser and navigate to http://localhost:3000

3. Log in with username admin and password admin

4. Create a new dashboard:
   - Click the + icon in the left sidebar
   - Select "Dashboard" from the dropdown menu
   - You'll see an empty dashboard with a welcome message
   - Click "Add visualization"

## Step 2: Create a Container Restart Count Panel

Container restarts are often the first indicator of application errors:

1. Select your data source:
   - Choose "Prometheus" from the data source dropdown

2. Enter the following PromQL query:
   
   sum by(pod) (kube_pod_container_status_restarts_total{namespace="sample-app"})
   

3. Configure the visualization:
   - On the right panel, select "Visualization" and choose "Stat"
   - Under "Panel options," name it "Container Restarts"
   - Under "Value options":
     - Set "Show" to "Calculate"
     - Set "Calculation" to "Last non-null value"
     - Set "Fields" to "All fields"

4. Set up thresholds for visual indicators:
   - Find "Thresholds" in the right panel
   - Click "Add threshold"
   - Set:
     - 0-1: Green (default)
     - 1-5: Orange (warning)
     - 5+: Red (critical)

5. Under "Text size" set the value to "Large"

6. Click the blue "Apply" button in the top-right corner

## Step 3: Create a Pod Health Status Panel

This panel will show the health status of all your pods:

1. Add a new visualization:
   - Click "Add" in the top menu
   - Select "Visualization"

2. Choose "Prometheus" as your data source

3. Enter this query to track unhealthy pods:
   
   sum by(pod) (kube_pod_status_phase{namespace="sample-app", phase!="Running"})
   

4. Configure visualization:
   - Select "Table" visualization
   - Under "Panel options," name it "Pod Health Issues"
   - Under "Table options":
     - Enable "Show header"

5. Under "Column styles":
   - Add a field override for "Value"
   - Set "Cell display mode" to "Color background"
   - Add thresholds: 
     - 0: Green
     - 1: Red

6. Click "Apply" to save this panel

## Step 4: Create a Memory Usage Panel

High memory usage often precedes application errors:

1. Add another visualization and select "Prometheus"

2. Enter this query for memory usage percentage:
   
   sum by(pod) (container_memory_usage_bytes{namespace="sample-app"}) / sum by(pod) (container_spec_memory_limit_bytes{namespace="sample-app"}) * 100
   

3. Configure visualization:
   - Select "Gauge" as the visualization type
   - Name the panel "Memory Usage (%)"
   
4. Under "Value options":
   - Set "Show" to "Calculate"
   - Set "Calculation" to "Last *"
   - Set "Fields" to match your pod names

5. Under "Gauge options":
   - Set "Min" to 0
   - Set "Max" to 100
   
6. Configure thresholds:
   - 0-70: Green
   - 70-85: Orange
   - 85-100: Red

7. Click "Apply" to save

## Step 5: Create a CPU Usage Panel

1. Add a new visualization with "Prometheus" data source

2. Enter this CPU usage query:
   
   sum by(pod) (rate(container_cpu_usage_seconds_total{namespace="sample-app"}[5m])) / sum by(pod) (kube_pod_container_resource_limits_cpu_cores{namespace="sample-app"}) * 100
   

3. Configure visualization:
   - Select "Gauge" visualization
   - Name it "CPU Usage (%)"
   
4. Configure value options and thresholds similar to the memory gauge:
   - 0-70: Green
   - 70-90: Orange
   - 90-100: Red

5. Click "Apply" to save

## Step 6: Create an HTTP Error Rate Panel

1. Add a new visualization with "Prometheus" data source

2. If you're using a standard metrics exporter, enter this query for HTTP errors:
   
   sum(rate(http_requests_total{namespace="sample-app", status_code=~"5.."}[5m])) / sum(rate(http_requests_total{namespace="sample-app"}[5m])) * 100
   
   
   Note: This assumes your application exposes standard Prometheus metrics. You may need to adjust the metric names to match your specific application.

3. Configure visualization:
   - Select "Time series" visualization
   - Name it "HTTP Error Rate (%)"
   
4. Under "Standard options":
   - Set "Unit" to "Percent (0-100)"
   
5. Under "Thresholds":
   - 0-1: Green
   - 1-5: Orange
   - 5+: Red

6. Under "Graph styles":
   - Set "Line width" to 2
   - Set "Fill opacity" to 20
   - Set "Line interpolation" to "Smooth"

7. Click "Apply" to save

## Step 7: Create a Slow Response Panel

1. Add a new visualization with "Prometheus" data source

2. Enter this query for response time:
   
   histogram_quantile(0.95, sum by(le) (rate(http_request_duration_seconds_bucket{namespace="sample-app"}[5m])))
   
   
   Note: Adjust metric names to match your application's exposed metrics.

3. Configure visualization:
   - Select "Time series" visualization
   - Name it "95th Percentile Response Time"
   
4. Under "Standard options":
   - Set "Unit" to "Seconds"
   
5. Under "Thresholds":
   - 0-0.5: Green
   - 0.5-1: Orange
   - 1+: Red

6. Click "Apply" to save

## Step 8: Create a Failed Pod Scheduling Panel

1. Add a new visualization with "Prometheus" data source

2. Enter this query:
   
   sum(kube_pod_status_scheduled{namespace="sample-app", condition="false"})
   

3. Configure visualization:
   - Select "Stat" visualization
   - Name it "Failed Pod Scheduling"
   
4. Under "Value options":
   - Set "Show" to "Calculate"
   - Set "Calculation" to "Last *"
   
5. Under "Thresholds":
   - 0: Green
   - 1+: Red

6. Click "Apply" to save

## Step 9: Create OOM (Out of Memory) Kill Counter

1. Add a new visualization with "Prometheus" data source

2. Enter this query:
   
   sum(container_oom_events_total{namespace="sample-app"})
   

3. Configure visualization:
   - Select "Stat" visualization
   - Name it "OOM Kill Events"
   
4. Under "Value options":
   - Set "Show" to "Calculate"
   - Set "Calculation" to "Last *"
   
5. Under "Thresholds":
   - 0: Green
   - 1+: Red

6. Click "Apply" to save

## Step 10: Arrange Your Dashboard

1. Resize and arrange all panels in a logical order:
   - Place the most critical error indicators at the top
   - Group related metrics together
   - Make sure the most important panels are prominent
   
2. For a suggested layout:
   - Top row: Container Restarts, Pod Health Issues, OOM Kill Events
   - Middle row: Memory Usage, CPU Usage
   - Bottom row: HTTP Error Rate, Response Time, Failed Pod Scheduling

3. Save your dashboard:
   - Click the save icon in the top-right corner
   - Name it "Comprehensive Error Monitoring"
   - Add a description if desired
   - Add tags like "errors", "monitoring", "kubernetes"
   - Click "Save"

## Step 11: Add Dashboard Settings

1. Click the gear icon in the top-right to access dashboard settings

2. Under "General":
   - Confirm your dashboard title
   - Add a detailed description

3. Under "Variables" (to make your dashboard reusable):
   - Add a variable named "namespace"
   - Set Type to "Query"
   - Set Data source to "Prometheus"
   - Query: label_values(kube_namespace_labels, namespace)
   - Under Selection options, enable "Multi-value" and "Include All option"
   - Click "Update" then "Apply"

4. Under "Time options":
   - Set auto-refresh to "On"
   - Set default refresh interval to "10s"

5. Save your dashboard again

## Step 12: Final Verification and Testing

1. Verify your dashboard shows meaningful data:
   - Check that all panels are populating with data
   - If any panel shows "No data," revisit the query to ensure it matches your metrics

2. Test error detection:
   - If possible, trigger a test error in your application
   - Verify it appears in your dashboard
   - Check the time it takes for the error to be reflected

3. Set up alerts (optional advanced step):
   - Click on a critical panel like "Container Restarts"
   - Go to Alert tab
   - Create a new alert rule based on thresholds
   - Set notification channels if configured

Your comprehensive error monitoring dashboard is now complete. It provides multiple perspectives on potential errors and issues in your Kubernetes applications, helping you identify and resolve problems quickly.